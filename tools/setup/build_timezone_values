#!/usr/bin/env python3
import json
import os
import sys
import zoneinfo
from datetime import datetime, timedelta

# Define paths
ZULIP_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../../")
sys.path.insert(0, ZULIP_PATH)

from zerver.lib.timezone import get_canonical_timezone_map

OUT_PATH = os.path.join(ZULIP_PATH, "web", "generated", "timezones.json")


def get_gmt_offset(tz_name: str) -> str:
    """Get GMT offset for a timezone in the format GMT(+HH:MM)."""
    try:
        now = datetime.now(zoneinfo.ZoneInfo(tz_name))
        offset: timedelta | None = now.utcoffset()

        if offset is None:
            return "GMT(+00:00)"  # Default to UTC if offset is missing

        offset_seconds = offset.total_seconds()
        hours, remainder = divmod(offset_seconds, 3600)  # Preserve sign directly
        minutes = remainder // 60
        if minutes == 0:
            return f"GMT{int(hours):+d}"  # Format as "GMT+9"
        return f"GMT{int(hours):+d}:{int(minutes):02d}"  # Format as "GMT+9:30"

        # return f"GMT({int(hours):+03d}:{int(minutes):02d})"  # New format

    except Exception as e:
        print(f"Error processing {tz_name}: {e}")
        return "GMT(+00:00)"  # Ensure consistency


# Get the list of timezones
timezones = sorted(
    zoneinfo.available_timezones() - {"Factory", "localtime"} - set(get_canonical_timezone_map())
)

# Create a dictionary with GMT offsets
timezone_data = [{"name": tz, "gmt_offset": get_gmt_offset(tz)} for tz in timezones]

# Save to JSON
with open(OUT_PATH, "w") as f:
    json.dump({"timezones": timezone_data}, f, indent=4)

print(f"âœ… Timezones file generated: {OUT_PATH}")
